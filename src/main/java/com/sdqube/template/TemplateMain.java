/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.sdqube.template;

import com.sdqube.entities.AuthenticationRpcGrpc;
import com.sdqube.service.Bootstrap;
import com.sdqube.service.SDQubeMain;
import com.sdqube.service.grpc.GrpcMain;
import com.sdqube.service.grpc.GrpcServiceCall;
import com.sdqube.service.logger.SDQubeLogger;
import com.sdqube.service.servicecall.AuthenticationGrpcServiceCall;
import io.grpc.ServerBuilder;
import io.grpc.ServerInterceptors;

public class TemplateMain extends GrpcMain {
    private static final SDQubeLogger logger = SDQubeLogger.getLogger(SDQubeMain.class);
    private GrpcServiceCall<AuthenticationRpcGrpc.AuthenticationRpcBlockingStub> authServiceCall;
    private final int port;
    public TemplateMain(int port) {
        this.port = port;
    }

    @Override
    protected void cleanUp() {
        try {
            authServiceCall.stop();
        } catch (InterruptedException e) {
            logger.error("Error while stopping service.", e);
        }
    }

    @Override
    public void configure() {
        authServiceCall = new AuthenticationGrpcServiceCall();
        TemplateService templateService= new TemplateServiceImpl(authServiceCall.getService());

        ServerBuilder<?> serverBuilder = ServerBuilder.forPort(port)
                .addService(ServerInterceptors.intercept(new TemplateRpcImpl(templateService)));
        this.buildServer("templateService", serverBuilder);
    }

    public static void main(String[] args) {
        Bootstrap bootstrap = new Bootstrap();
        bootstrap.run(new TemplateMain(9091));
    }

}
