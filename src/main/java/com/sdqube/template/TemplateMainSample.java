/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.sdqube.template;

import com.orbitz.consul.*;
import com.orbitz.consul.model.agent.ImmutableRegistration;
import com.orbitz.consul.model.agent.Registration;
import com.orbitz.consul.model.health.ServiceHealth;

import java.util.Collections;
import java.util.List;

public class TemplateMainSample extends Thread {

    public void run(){

        // Checking whether the thread is Daemon or not
        if(Thread.currentThread().isDaemon()){
            System.out.println("Daemon thread executing");


        }
        else{
            System.out.println("user(normal) thread executing");
            try {

                Consul client = Consul.builder().build(); // connect on localhost


                AgentClient agentClient = client.agentClient();

                String serviceId = "1";
                Registration service = ImmutableRegistration.builder()
                        .id(serviceId)
                        .name("template-service")
                        .port(8080)
                        .check(Registration.RegCheck.ttl(3L)) // registers with a TTL of 3 seconds
                        .tags(Collections.singletonList("tag1"))
                        .meta(Collections.singletonMap("version", "1.0"))
                        .build();

                agentClient.register(service);

                // Check in with Consul (serviceId required only).
                // Client will prepend "service:" for service level checks.
                // Note that you need to continually check in before the TTL expires, otherwise your service's state will be marked as "critical".
                agentClient.pass(serviceId);


                HealthClient healthClient = client.healthClient();

// Discover only "passing" nodes
                List<ServiceHealth> nodes = healthClient.getHealthyServiceInstances("template-service").getResponse();


                KeyValueClient kvClient = client.keyValueClient();

                kvClient.putValue("foo", "bar");
                String value = kvClient.getValueAsString("foo").get(); // bar

                Thread.sleep(10L * 1000L);

            } catch (NotRegisteredException | InterruptedException e) {
                e.printStackTrace();
            }
        }
    }


    public static void main(String[] args) {
        TemplateMainSample t1=new TemplateMainSample();
//        t1.setDaemon(true);
        t1.start();

    }
}
